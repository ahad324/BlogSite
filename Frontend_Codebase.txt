/Users/macbook/Documents/BlogSite/client/index.html
<DOCUMENT>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>BlogSite</title>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/tailwind.config.js
<DOCUMENT>
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,jsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/vite.config.js
<DOCUMENT>
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss(),],
});
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/README.md
<DOCUMENT>
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/.gitignore
<DOCUMENT>
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/package.json
<DOCUMENT>
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "format": "prettier --write .",
    "lint:check": "eslint . --max-warnings=0",
    "format:check": "prettier --check ."
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.11",
    "axios": "^1.10.0",
    "joi": "^17.13.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@babel/eslint-parser": "^7.28.0",
    "@babel/plugin-syntax-jsx": "^7.27.1",
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "prettier": "^3.6.2",
    "vite": "^7.0.3"
  }
}
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/.prettierrc
<DOCUMENT>
{
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "semi": true
}
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/eslint.config.js
<DOCUMENT>
import js from '@eslint/js';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import globals from 'globals';
import babelParser from '@babel/eslint-parser';

export default [
  {
    files: ['**/*.js', '**/*.jsx'],
    languageOptions: {
      parser: babelParser,
      parserOptions: {
        requireConfigFile: false,
        babelOptions: {
          plugins: ['@babel/plugin-syntax-jsx'],
        },
        ecmaFeatures: {
          jsx: true,
        },
        ecmaVersion: 2021,
        sourceType: 'module',
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2021,
      },
    },
    plugins: {
      react,
      'react-hooks': reactHooks,
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      ...js.configs.recommended.rules,
      'react/react-in-jsx-scope': 'off',
      'react/jsx-uses-vars': 'warn',
      'react/prop-types': 'off',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
      quotes: ['error', 'single'],
      semi: ['error', 'always'],
      'no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
    },
  },
];
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/.vscode/settings.json
<DOCUMENT>
{
  "css.customData": [".vscode/tailwind.config.js"]
}
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/main.jsx
<DOCUMENT>
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './context/AuthContext.jsx';
import './styles/tailwind.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/App.jsx
<DOCUMENT>
import { Routes, Route } from 'react-router-dom';
import Header from './components/common/Header.jsx';
import Footer from './components/common/Footer.jsx';
import Home from './pages/Home.jsx';
import Post from './pages/Post.jsx';
import UserProfile from './pages/UserProfile.jsx';
import Login from './components/auth/Login.jsx';
import Register from './components/auth/Register.jsx';
import UpdateProfile from './components/auth/UpdateProfile.jsx';

function App() {
  return (
    <div className="flex flex-col min-h-screen bg-gray-900 text-gray-100">
      <Header />
      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/posts/:id" element={<Post />} />
          <Route path="/users/:id" element={<UserProfile />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/profile/update" element={<UpdateProfile />} />
        </Routes>
      </main>
      <Footer />
    </div>
  );
}

export default App;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/context/AuthContext.jsx
<DOCUMENT>
import { createContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { login, logout, getCurrentUser } from '../utils/api';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await getCurrentUser();
        setUser(response.data);
      } catch (error) {
        setUser(null);
      } finally {
        setLoading(false);
      }
    };
    fetchUser();
  }, []);

  const loginUser = async (credentials) => {
    try {
      const response = await login(credentials);
      setUser(response.data.user);
      navigate('/');
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Login failed');
    }
  };

  const logoutUser = async () => {
    try {
      await logout();
      setUser(null);
      navigate('/login');
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Logout failed');
    }
  };

  return (
    <AuthContext.Provider
      value={{ user, loading, loginUser, logoutUser, setUser }}
    >
      {children}
    </AuthContext.Provider>
  );
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/utils/helpers.js
<DOCUMENT>
export const formatDate = (date) => {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export const truncateText = (text, maxLength) => {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/utils/api.js
<DOCUMENT>
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:3000/api',
  withCredentials: true,
});

export const register = async (data) => await api.post('/users/register', data);
export const login = async (data) => await api.post('/users/login', data);
export const logout = async () => await api.post('/users/logout');
export const getCurrentUser = async () => await api.get('/users/me');
export const getUser = async (id) => await api.get(`/users/${id}`);
export const updateUser = async (id, data) => await api.put(`/users/${id}`, data);
export const createPost = async (data) => await api.post('/posts', data);
export const getPosts = async (params) => await api.get('/posts', { params });
export const getPost = async (id) => await api.get(`/posts/${id}`);
export const updatePost = async (id, data) => await api.put(`/posts/${id}`, data);
export const deletePost = async (id) => await api.delete(`/posts/${id}`);
export const createComment = async (data) => await api.post('/comments', data);
export const getComments = async (postId, params) => await api.get(`/comments/post/${postId}`, { params });
export const updateComment = async (id, data) => await api.put(`/comments/${id}`, data);
export const deleteComment = async (id) => await api.delete(`/comments/${id}`);
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/styles/tailwind.css
<DOCUMENT>
@import "tailwindcss";
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/comments/CommentCard.jsx
<DOCUMENT>
import { useState, useContext } from 'react';
import { AuthContext } from '../../context/AuthContext.jsx';
import { formatDate } from '../../utils/helpers';
import { updateComment, deleteComment } from '../../utils/api';

function CommentCard({ comment, onCommentUpdated, onCommentDeleted }) {
  const { user } = useContext(AuthContext);
  const [editing, setEditing] = useState(false);
  const [content, setContent] = useState(comment.content);
  const [error, setError] = useState(null);

  const handleUpdate = async () => {
    try {
      await updateComment(comment._id, { content });
      setEditing(false);
      onCommentUpdated();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update comment');
    }
  };

  const handleDelete = async () => {
    try {
      await deleteComment(comment._id);
      onCommentDeleted();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to delete comment');
    }
  };

  return (
    <div className="bg-gray-800 border border-gray-700 rounded-xl shadow-lg p-6 mb-4">
      {editing ? (
        <div className="space-y-4">
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 min-h-[120px]"
            aria-label="Edit comment"
          />
          {error && (
            <p className="text-red-500 text-center" role="alert">
              {error}
            </p>
          )}
          <div className="flex space-x-4">
            <button
              onClick={handleUpdate}
              className="bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 transition-colors duration-300"
              aria-label="Save comment"
            >
              Save
            </button>
            <button
              onClick={() => setEditing(false)}
              className="bg-gray-700 text-gray-200 font-semibold py-3 px-6 rounded-lg hover:bg-gray-600 transition-colors duration-300"
              aria-label="Cancel editing"
            >
              Cancel
            </button>
          </div>
        </div>
      ) : (
        <>
          <p className="text-gray-300 leading-relaxed mb-3 text-lg">
            {comment.content}
          </p>
          <div className="flex justify-between text-sm text-gray-400">
            <span>By {comment.author.username}</span>
            <span>{formatDate(comment.createdAt)}</span>
          </div>
          {user && user.id === comment.author._id && (
            <div className="flex space-x-4 mt-4">
              <button
                onClick={() => setEditing(true)}
                className="bg-gray-700 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-600 transition-colors duration-300"
                aria-label="Edit comment"
              >
                Edit
              </button>
              <button
                onClick={handleDelete}
                className="bg-red-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-600 transition-colors duration-300"
                aria-label="Delete comment"
              >
                Delete
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
}

export default CommentCard;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/comments/CommentForm.jsx
<DOCUMENT>
import { useState, useContext } from 'react';
import { AuthContext } from '../../context/AuthContext.jsx';
import { createComment } from '../../utils/api';

function CommentForm({ postId, onCommentAdded }) {
  const { user } = useContext(AuthContext);
  const [content, setContent] = useState('');
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createComment({ content, post: postId });
      setContent('');
      setSuccess('Comment added successfully');
      setTimeout(() => setSuccess(null), 3000); // Clear success message after 3s
      onCommentAdded();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to create comment');
    }
  };

  if (!user) return null;

  return (
    <div className="mb-8 bg-gray-800 border border-gray-700 rounded-xl shadow-lg p-6">
      <h3 className="text-xl font-semibold text-gray-100 mb-4">
        Add a Comment
      </h3>
      {error && (
        <p className="text-red-500 mb-4 text-center" role="alert">
          {error}
        </p>
      )}
      {success && (
        <p className="text-green-500 mb-4 text-center" role="alert">
          {success}
        </p>
      )}
      <div className="space-y-4">
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 min-h-[120px]"
          placeholder="Write your comment..."
          required
          aria-label="Comment content"
        />
        <button
          onClick={handleSubmit}
          className="bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 transition-colors duration-300"
        >
          Submit Comment
        </button>
      </div>
    </div>
  );
}

export default CommentForm;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/posts/PostForm.jsx
<DOCUMENT>
import { useState, useContext } from 'react';
import { AuthContext } from '../../context/AuthContext.jsx';
import Joi from 'joi';

function PostForm({ onSubmit, initialData = {} }) {
  const { user } = useContext(AuthContext);
  const [formData, setFormData] = useState({
    title: initialData.title || '',
    content: initialData.content || '',
    tags: initialData.tags || [],
  });
  const [tagInput, setTagInput] = useState('');
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Joi schema matching backend validation
  const schema = Joi.object({
    title: Joi.string()
      .min(5)
      .required()
      .messages({
        'string.min': 'Title must be at least 5 characters long',
        'string.empty': 'Title is required',
        'any.required': 'Title is required',
      }),
    content: Joi.string()
      .required()
      .messages({
        'string.empty': 'Content is required',
        'any.required': 'Content is required',
      }),
    tags: Joi.array()
      .items(Joi.string().pattern(/^[a-zA-Z0-9-]+$/, 'alphanumeric with hyphens').min(1))
      .optional()
      .messages({
        'string.pattern.base': 'Tags can only contain letters, numbers, or hyphens',
        'string.min': 'Tags cannot be empty',
      }),
  });

  const validateField = (name, value) => {
    const fieldSchema = Joi.object({ [name]: schema.extract(name) });
    const { error } = fieldSchema.validate({ [name]: value });
    return error ? error.details[0].message : null;
  };

  const validateForm = () => {
    const { error } = schema.validate(formData, { abortEarly: false });
    if (!error) return true;
    const newErrors = {};
    error.details.forEach((err) => {
      newErrors[err.path[0]] = err.message;
    });
    setErrors(newErrors);
    return false;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    const errorMessage = validateField(name, value);
    setErrors((prev) => ({ ...prev, [name]: errorMessage }));
  };

  const handleTagInput = (e) => {
    const value = e.target.value;
    if (value.endsWith(' ') && value.trim()) {
      const newTag = value.trim();
      const tagError = validateField('tags', [...formData.tags, newTag]);
      if (!tagError) {
        setFormData({ ...formData, tags: [...formData.tags, newTag] });
        setTagInput('');
        setErrors((prev) => ({ ...prev, tags: null }));
      } else {
        setErrors((prev) => ({ ...prev, tags: tagError }));
      }
    } else {
      setTagInput(value);
    }
  };

  const removeTag = (tagToRemove) => {
    const updatedTags = formData.tags.filter((tag) => tag !== tagToRemove);
    setFormData({ ...formData, tags: updatedTags });
    const tagError = validateField('tags', updatedTags);
    setErrors((prev) => ({ ...prev, tags: tagError }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    setIsSubmitting(true);
    try {
      await onSubmit(formData);
      setFormData({ title: '', content: '', tags: [] });
      setTagInput('');
      setErrors({});
    } catch (err) {
      setErrors({ general: err.response?.data?.error || 'Failed to create/update post' });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!user) return null;

  const isFormValid = !validateField('title', formData.title) && !validateField('content', formData.content) && !validateField('tags', formData.tags);

  return (
    <div className="max-w-3xl mx-auto mt-12 p-8 bg-gray-800 border border-gray-700 rounded-xl shadow-lg">
      <h2 className="text-3xl font-bold text-gray-100 mb-8">
        {initialData._id ? 'Edit Post' : 'Create Post'}
      </h2>
      {errors.general && (
        <p className="text-red-500 mb-6 text-center" role="alert">
          {errors.general}
        </p>
      )}
      <div className="space-y-6">
        <div>
          <label
            htmlFor="title"
            className="block mb-2 text-gray-300 font-medium"
          >
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className={`w-full p-4 bg-gray-700 border ${errors.title ? 'border-red-500' : 'border-gray-600'} rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300`}
            required
            aria-describedby="title-error"
          />
          {errors.title && (
            <p className="text-red-500 text-sm mt-1" id="title-error">
              {errors.title}
            </p>
          )}
        </div>
        <div>
          <label
            htmlFor="content"
            className="block mb-2 text-gray-300 font-medium"
          >
            Content
          </label>
          <textarea
            id="content"
            name="content"
            value={formData.content}
            onChange={handleChange}
            className={`w-full p-4 bg-gray-700 border ${errors.content ? 'border-red-500' : 'border-gray-600'} rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 min-h-[200px]`}
            required
            aria-describedby="content-error"
          />
          {errors.content && (
            <p className="text-red-500 text-sm mt-1" id="content-error">
              {errors.content}
            </p>
          )}
        </div>
        <div>
          <label
            htmlFor="tags"
            className="block mb-2 text-gray-300 font-medium"
          >
            Tags (press space to add)
          </label>
          <div className="flex flex-wrap gap-2 mb-2">
            {formData.tags.map((tag, index) => (
              <div
                key={index}
                className="flex items-center bg-emerald-500 text-white text-sm font-medium px-3 py-1.5 rounded-full"
              >
                {tag}
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-2 text-white hover:text-gray-200 focus:outline-none"
                  aria-label={`Remove tag ${tag}`}
                >
                  &times;
                </button>
              </div>
            ))}
          </div>
          <input
            type="text"
            id="tags"
            value={tagInput}
            onChange={handleTagInput}
            className={`w-full p-4 bg-gray-700 border ${errors.tags ? 'border-red-500' : 'border-gray-600'} rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300`}
            placeholder="Type a tag and press space..."
            aria-describedby="tags-error"
          />
          {errors.tags && (
            <p className="text-red-500 text-sm mt-1" id="tags-error">
              {errors.tags}
            </p>
          )}
        </div>
        <button
          onClick={handleSubmit}
          disabled={!isFormValid || isSubmitting}
          className={`w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-300 ${
            !isFormValid || isSubmitting
              ? 'opacity-50 cursor-not-allowed'
              : 'hover:bg-blue-600 focus:ring-2 focus:ring-blue-600 focus:outline-none'
          }`}
        >
          {isSubmitting
            ? 'Submitting...'
            : initialData._id
            ? 'Update Post'
            : 'Create Post'}
        </button>
      </div>
    </div>
  );
}

export default PostForm;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/posts/PostDetail.jsx
<DOCUMENT>
import { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext.jsx';
import { getPost, updatePost, deletePost } from '../../utils/api';
import { formatDate } from '../../utils/helpers';
import PostForm from './PostForm.jsx';
import CommentForm from '../comments/CommentForm.jsx';
import CommentCard from '../comments/CommentCard.jsx';
import { useComments } from '../../hooks/useComments';
import LoadingSpinner from '../common/LoadingSpinner.jsx';
import Pagination from '../common/Pagination.jsx';

function PostDetail() {
  const { id } = useParams();
  const { user } = useContext(AuthContext);
  const navigate = useNavigate();
  const [post, setPost] = useState(null);
  const [editing, setEditing] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const {
    comments,
    loading: commentsLoading,
    pagination,
    fetchComments,
  } = useComments(id);

  useEffect(() => {
    const fetchPost = async () => {
      try {
        const response = await getPost(id);
        setPost(response.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Failed to fetch post');
      }
    };
    fetchPost();
    fetchComments();
  }, [id]);

  const handleUpdate = async (data) => {
    try {
      await updatePost(id, data);
      setPost({ ...post, ...data });
      setEditing(false);
      setError(null);
      setSuccess('Post updated successfully');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update post');
    }
  };

  const handleDelete = async () => {
    try {
      await deletePost(id);
      setSuccess('Post deleted successfully');
      setTimeout(() => navigate('/'), 1500); // Redirect after showing success
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to delete post');
    }
  };

  if (!post && !error) return <LoadingSpinner />;
  if (error)
    return (
      <p className="text-red-500 text-center" role="alert">
        {error}
      </p>
    );

  return (
    <div className="max-w-4xl mx-auto mt-12">
      {success && (
        <p className="text-green-500 text-center mb-4" role="alert">
          {success}
        </p>
      )}
      {editing ? (
        <PostForm onSubmit={handleUpdate} initialData={post} />
      ) : (
        <div className="bg-gray-800 border border-gray-700 rounded-xl shadow-lg p-8">
          <h1 className="text-4xl font-bold text-gray-100 mb-6">
            {post.title}
          </h1>
          <div className="flex justify-between text-sm text-gray-400 mb-6">
            <span>By {post.author.username}</span>
            <span>{formatDate(post.createdAt)}</span>
          </div>
          <p className="text-gray-300 leading-relaxed mb-8 text-lg">
            {post.content}
          </p>
          {post.tags && post.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-8">
              {post.tags.map((tag, index) => (
                <span
                  key={index}
                  className="bg-emerald-500 text-white text-sm font-medium px-3 py-1.5 rounded-full hover:bg-emerald-600 transition-colors duration-300"
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
          {user && user.id === post.author._id && (
            <div className="flex space-x-4 mb-8">
              <button
                onClick={() => setEditing(true)}
                className="bg-gray-700 text-gray-200 font-semibold py-3 px-6 rounded-lg hover:bg-gray-600 transition-colors duration-300"
                aria-label="Edit post"
              >
                Edit Post
              </button>
              <button
                onClick={handleDelete}
                className="bg-red-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-red-700 transition-colors duration-300"
                aria-label="Delete post"
              >
                Delete Post
              </button>
            </div>
          )}
          <h2 className="text-2xl font-bold text-gray-100 mb-6">Comments</h2>
          <CommentForm postId={id} onCommentAdded={fetchComments} />
          {commentsLoading ? (
            <LoadingSpinner />
          ) : comments.length === 0 ? (
            <p className="text-gray-400 text-center">No comments yet.</p>
          ) : (
            <>
              {comments.map((comment) => (
                <CommentCard
                  key={comment._id}
                  comment={comment}
                  onCommentUpdated={fetchComments}
                  onCommentDeleted={fetchComments}
                />
              ))}
              <Pagination
                currentPage={pagination.page}
                totalPages={pagination.totalPages}
                onPageChange={(page) => fetchComments({ page })}
              />
            </>
          )}
        </div>
      )}
    </div>
  );
}

export default PostDetail;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/posts/PostCard.jsx
<DOCUMENT>
import { Link } from 'react-router-dom';
import { formatDate, truncateText } from '../../utils/helpers';

function PostCard({ post }) {
  return (
    <div className="bg-gray-800 border border-gray-700 rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
      <h3 className="text-xl font-semibold text-gray-100 mb-3">
        <Link
          to={`/posts/${post._id}`}
          className="text-blue-400 hover:text-blue-300 transition-colors duration-300"
        >
          {post.title}
        </Link>
      </h3>
      <p className="text-gray-300 leading-relaxed mb-4">
        {truncateText(post.content, 120)}
      </p>
      <div className="flex justify-between text-sm text-gray-400 mb-4">
        <span>By {post.author.username}</span>
        <span>{formatDate(post.createdAt)}</span>
      </div>
      {post.tags && post.tags.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {post.tags.map((tag, index) => (
            <span
              key={index}
              className="bg-emerald-500 text-white text-sm font-medium px-3 py-1.5 rounded-full hover:bg-emerald-600 transition-colors duration-300"
            >
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>
  );
}

export default PostCard;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/auth/UpdateProfile.jsx
<DOCUMENT>
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext.jsx';
import { updateUser } from '../../utils/api';

function UpdateProfile() {
  const { user, setUser } = useContext(AuthContext);
  const [formData, setFormData] = useState({
    username: user?.username || '',
    email: user?.email || '',
    password: '',
  });
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await updateUser(user.id, formData);
      setUser(response.data);
      navigate(`/users/${user.id}`);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update profile');
    }
  };

  if (!user) return null;

  return (
    <div className="max-w-md mx-auto mt-16 p-8 bg-gray-800 border border-gray-700 rounded-xl shadow-lg">
      <h2 className="text-3xl font-bold text-gray-100 mb-8 text-center">
        Update Profile
      </h2>
      {error && (
        <p className="text-red-500 mb-6 text-center" role="alert">
          {error}
        </p>
      )}
      <div className="space-y-6">
        <div>
          <label
            htmlFor="username"
            className="block mb-2 text-gray-300 font-medium"
          >
            Username
          </label>
          <input
            type="text"
            id="username"
            name="username"
            value={formData.username}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="username-error"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block mb-2 text-gray-300 font-medium"
          >
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="email-error"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block mb-2 text-gray-300 font-medium"
          >
            Password (leave blank to keep current)
          </label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            aria-describedby="password-error"
          />
        </div>
        <button
          onClick={handleSubmit}
          className="w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-600 focus:outline-none transition-colors duration-300"
        >
          Update Profile
        </button>
      </div>
    </div>
  );
}

export default UpdateProfile;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/auth/Login.jsx
<DOCUMENT>
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext.jsx';
import { Link } from 'react-router-dom';

function Login() {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [error, setError] = useState(null);
  const { loginUser } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await loginUser(formData);
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-16 p-8 bg-gray-800 border border-gray-700 rounded-xl shadow-lg">
      <h2 className="text-3xl font-bold text-gray-100 mb-8 text-center">
        Sign In
      </h2>
      {error && (
        <p className="text-red-500 mb-6 text-center" role="alert">
          {error}
        </p>
      )}
      <div className="space-y-6">
        <div>
          <label
            htmlFor="email"
            className="block mb-2 text-gray-300 font-medium"
          >
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="email-error"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block mb-2 text-gray-300 font-medium"
          >
            Password
          </label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="password-error"
          />
        </div>
        <button
          onClick={handleSubmit}
          className="w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-600 focus:outline-none transition-colors duration-300"
        >
          Sign In
        </button>
      </div>
      <p className="mt-6 text-center text-gray-400">
        Don't have an account?{' '}
        <Link
          to="/register"
          className="text-blue-400 hover:text-blue-300 transition-colors duration-300"
        >
          Sign Up
        </Link>
      </p>
    </div>
  );
}

export default Login;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/auth/Register.jsx
<DOCUMENT>
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { register } from '../../utils/api';
import { Link } from 'react-router-dom';

function Register() {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
  });
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await register(formData);
      navigate('/login');
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-16 p-8 bg-gray-800 border border-gray-700 rounded-xl shadow-lg">
      <h2 className="text-3xl font-bold text-gray-100 mb-8 text-center">
        Sign Up
      </h2>
      {error && (
        <p className="text-red-500 mb-6 text-center" role="alert">
          {error}
        </p>
      )}
      <div className="space-y-6">
        <div>
          <label
            htmlFor="username"
            className="block mb-2 text-gray-300 font-medium"
          >
            Username
          </label>
          <input
            type="text"
            id="username"
            name="username"
            value={formData.username}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="username-error"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block mb-2 text-gray-300 font-medium"
          >
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="email-error"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block mb-2 text-gray-300 font-medium"
          >
            Password
          </label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            className="w-full p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            required
            aria-describedby="password-error"
          />
        </div>
        <button
          onClick={handleSubmit}
          className="w-full bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-600 focus:outline-none transition-colors duration-300"
        >
          Sign Up
        </button>
      </div>
      <p className="mt-6 text-center text-gray-400">
        Already have an account?{' '}
        <Link
          to="/login"
          className="text-blue-400 hover:text-blue-300 transition-colors duration-300"
        >
          Sign In
        </Link>
      </p>
    </div>
  );
}

export default Register;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/common/Header.jsx
<DOCUMENT>
import { useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { AuthContext } from '../../context/AuthContext.jsx';

function Header() {
  const { user, logoutUser } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleLogout = async () => {
    try {
      await logoutUser();
    } catch (error) {
      console.error(error.message);
    }
  };

  return (
    <header className="bg-gray-800 border-b border-gray-700 shadow-lg sticky top-0 z-50">
      <nav className="container mx-auto px-4 sm:px-6 lg:px-8 py-5 flex justify-between items-center">
        <Link
          to="/"
          className="text-3xl font-bold text-blue-400 hover:text-blue-300 transition-colors duration-300"
        >
          BlogSite
        </Link>
        <div className="flex items-center space-x-8">
          <Link
            to="/"
            className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
          >
            Home
          </Link>
          {user ? (
            <>
              <Link
                to={`/users/${user.id}`}
                className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
              >
                Profile
              </Link>
              <Link
                to="/profile/update"
                className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
              >
                Update Profile
              </Link>
              <button
                onClick={handleLogout}
                className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
              >
                Logout
              </button>
            </>
          ) : (
            <>
              <Link
                to="/login"
                className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
              >
                Login
              </Link>
              <Link
                to="/register"
                className="text-gray-300 hover:text-blue-400 transition-colors duration-300 text-lg font-medium"
              >
                Register
              </Link>
            </>
          )}
        </div>
      </nav>
    </header>
  );
}

export default Header;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/common/LoadingSpinner.jsx
<DOCUMENT>
function LoadingSpinner() {
  return (
    <div
      className="flex justify-center items-center py-16"
      aria-label="Loading"
    >
      <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-emerald-500"></div>
    </div>
  );
}

export default LoadingSpinner;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/common/Footer.jsx
<DOCUMENT>
function Footer() {
  return (
    <footer className="bg-gray-800 border-t border-gray-700 text-gray-400 text-center py-8">
      <p className="text-sm">
        © {new Date().getFullYear()} BlogSite. All rights reserved.
      </p>
    </footer>
  );
}

export default Footer;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/components/common/Pagination.jsx
<DOCUMENT>
function Pagination({ currentPage, totalPages, onPageChange }) {
  const handlePrev = () => {
    if (currentPage > 1) onPageChange(currentPage - 1);
  };

  const handleNext = () => {
    if (currentPage < totalPages) onPageChange(currentPage + 1);
  };

  return (
    <div className="flex justify-center items-center space-x-4 mt-10">
      <button
        onClick={handlePrev}
        disabled={currentPage === 1}
        className="bg-gray-700 text-gray-200 font-semibold py-3 px-6 rounded-xl hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300"
        aria-label="Previous page"
      >
        Previous
      </button>
      <span className="text-gray-400 font-medium" aria-live="polite">
        Page {currentPage} of {totalPages}
      </span>
      <button
        onClick={handleNext}
        disabled={currentPage === totalPages}
        className="bg-gray-700 text-gray-200 font-semibold py-3 px-6 rounded-xl hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300"
        aria-label="Next page"
      >
        Next
      </button>
    </div>
  );
}

export default Pagination;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/hooks/useAuth.js
<DOCUMENT>
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext.jsx';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/hooks/useComments.js
<DOCUMENT>
import { useState, useEffect } from 'react';
import { getComments, createComment, updateComment, deleteComment } from '../utils/api';

export const useComments = (postId) => {
  const [comments, setComments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({ page: 1, totalPages: 1 });

  const fetchComments = async (params = {}) => {
    setLoading(true);
    try {
      const response = await getComments(postId, { page: 1, limit: 10, sort: 'createdAt', order: 'desc', ...params });
      setComments(response.data.docs);
      setPagination({
        page: response.data.page,
        totalPages: response.data.totalPages,
      });
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch comments');
    } finally {
      setLoading(false);
    }
  };

  const addComment = async (data) => {
    try {
      const response = await createComment(data);
      setComments([response.data.comment, ...comments]);
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to create comment');
    }
  };

  const editComment = async (id, data) => {
    try {
      const response = await updateComment(id, data);
      setComments(comments.map((comment) => (comment._id === id ? response.data.comment : comment)));
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to update comment');
    }
  };

  const removeComment = async (id) => {
    try {
      await deleteComment(id);
      setComments(comments.filter((comment) => comment._id !== id));
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to delete comment');
    }
  };

  return { comments, loading, error, pagination, fetchComments, addComment, editComment, removeComment };
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/hooks/usePosts.js
<DOCUMENT>
import { useState, useEffect } from 'react';
import { getPosts, createPost, updatePost, deletePost } from '../utils/api';

export const usePosts = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({ page: 1, totalPages: 1 });

  const fetchPosts = async (params = {}) => {
    setLoading(true);
    try {
      const response = await getPosts({ page: 1, limit: 10, ...params });
      setPosts(response.data.docs);
      setPagination({
        page: response.data.page,
        totalPages: response.data.totalPages,
      });
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch posts');
    } finally {
      setLoading(false);
    }
  };

  const addPost = async (data) => {
    try {
      const response = await createPost(data);
      setPosts([response.data.post, ...posts]);
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to create post');
    }
  };

  const editPost = async (id, data) => {
    try {
      const response = await updatePost(id, data);
      setPosts(posts.map((post) => (post._id === id ? response.data.post : post)));
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to update post');
    }
  };

  const removePost = async (id) => {
    try {
      await deletePost(id);
      setPosts(posts.filter((post) => post._id !== id));
    } catch (err) {
      throw new Error(err.response?.data?.message || 'Failed to delete post');
    }
  };

  return { posts, loading, error, pagination, fetchPosts, addPost, editPost, removePost };
};
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/pages/UserProfile.jsx
<DOCUMENT>
import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getUser } from '../utils/api';
import PostCard from '../components/posts/PostCard.jsx';
import LoadingSpinner from '../components/common/LoadingSpinner.jsx';

function UserProfile() {
  const { id } = useParams();
  const [user, setUser] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await getUser(id);
        setUser(response.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Failed to fetch user');
      }
    };
    fetchUser();
  }, [id]);

  if (!user && !error) return <LoadingSpinner />;
  if (error)
    return (
      <p className="text-red-500 text-center" role="alert">
        {error}
      </p>
    );

  return (
    <div className="max-w-3xl mx-auto mt-12">
      <div className="bg-gray-800 border border-gray-700 rounded-xl shadow-lg p-8">
        <h1 className="text-3xl font-bold text-gray-100 mb-6">
          {user.username}'s Profile
        </h1>
        <p className="text-gray-300 mb-6">Email: {user.email}</p>
        <h2 className="text-2xl font-semibold text-gray-100 mb-4">Posts</h2>
        {user.posts.length === 0 ? (
          <p className="text-gray-400">No posts yet.</p>
        ) : (
          <div className="grid gap-6 sm:grid-cols-2">
            {user.posts.map((post) => (
              <PostCard key={post._id} post={post} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

export default UserProfile;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/pages/Post.jsx
<DOCUMENT>
import PostDetail from '../components/posts/PostDetail.jsx';

function Post() {
  return <PostDetail />;
}

export default Post;
</DOCUMENT>

/Users/macbook/Documents/BlogSite/client/src/pages/Home.jsx
<DOCUMENT>
import { useEffect, useState, useCallback, useRef } from 'react';
import { usePosts } from '../hooks/usePosts';
import PostCard from '../components/posts/PostCard.jsx';
import PostForm from '../components/posts/PostForm.jsx';
import LoadingSpinner from '../components/common/LoadingSpinner.jsx';
import Pagination from '../components/common/Pagination.jsx';

function Home() {
  const { posts, loading, error, pagination, fetchPosts, addPost } = usePosts();
  const [filters, setFilters] = useState({
    tag: '',
    sort: 'createdAt',
    order: 'desc',
  });
  const [debouncedTag, setDebouncedTag] = useState('');
  const lastFetchParams = useRef(null);

  const debounce = (func, delay) => {
    let timeoutId;
    return (...args) => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => func(...args), delay);
    };
  };

  const debouncedFetchPosts = useCallback(
    debounce((tag) => {
      setDebouncedTag(tag);
    }, 500),
    []
  );

  useEffect(() => {
    const params = {
      tag: debouncedTag,
      sort: filters.sort,
      order: filters.order,
      page: 1,
      limit: 10,
    };

    // Compare with last fetched parameters to avoid redundant calls
    if (
      lastFetchParams.current &&
      JSON.stringify(params) === JSON.stringify(lastFetchParams.current)
    ) {
      return;
    }

    fetchPosts(params);
    lastFetchParams.current = params;
  }, [debouncedTag, filters.sort, filters.order, fetchPosts]);

  const handleTagFilter = (e) => {
    setFilters((prev) => ({ ...prev, tag: e.target.value }));
    debouncedFetchPosts(e.target.value);
  };

  const handleSortChange = (e) => {
    const [sort, order] = e.target.value.split(':');
    setFilters((prev) => ({ ...prev, sort, order }));
  };

  return (
    <div>
      <h1 className="text-4xl font-bold text-gray-100 mb-12 text-center">
        BlogSite
      </h1>
      <PostForm onSubmit={addPost} />
      <div className="my-8 max-w-lg mx-auto flex flex-col sm:flex-row gap-4">
        <input
          type="text"
          placeholder="Filter by tag..."
          value={filters.tag}
          onChange={handleTagFilter}
          name="tags filter"
          className="flex-1 p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
          aria-label="Filter posts by tag"
        />
        <div className="flex flex-col">
          <label htmlFor="sort" className="text-gray-300 mb-2 font-medium">
            Sort by: {filters.sort === 'createdAt' ? 'Date' : 'Title'}
          </label>
          <select
            id="sort"
            value={`${filters.sort}:${filters.order}`}
            onChange={handleSortChange}
            className="w-full sm:w-48 p-4 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300"
            aria-label="Sort posts"
          >
            <option value="createdAt:desc">Newest First (by Date)</option>
            <option value="createdAt:asc">Oldest First (by Date)</option>
            <option value="title:asc">Title A-Z</option>
            <option value="title:desc">Title Z-A</option>
          </select>
        </div>
      </div>
      {loading ? (
        <LoadingSpinner />
      ) : error ? (
        <p className="text-red-500 text-center" role="alert">
          {error}
        </p>
      ) : posts.length === 0 ? (
        <p className="text-gray-400 text-center">No posts found.</p>
      ) : (
        <>
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {posts.map((post) => (
              <PostCard key={post._id} post={post} />
            ))}
          </div>
          <Pagination
            currentPage={pagination.page}
            totalPages={pagination.totalPages}
            onPageChange={(page) =>
              fetchPosts({
                page,
                tag: debouncedTag,
                sort: filters.sort,
                order: filters.order,
                limit: 10,
              })
            }
          />
        </>
      )}
    </div>
  );
}

export default Home;
</DOCUMENT>

